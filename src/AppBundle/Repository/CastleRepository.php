<?php

namespace AppBundle\Repository;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventsRepository extends \Doctrine\ORM\EntityRepository
{


    public function eventAliasSearch($alias)
    {
        //je passe en variable la wildcard alias
        //on utlise le query builder qui nous permet de créér des requêtes en base de données
        // pour la table Event (on est dans EventsRepository) (usine à requete sql)
        //On appelle la méthode 'createQueryBuilder' qui renvoie une classe qui nous permet de créer
        // des requetes en base de données pour la table Event (on est dans EventsRepository)
        $qb = $this->createQueryBuilder('e');
        //par convention, on met juste une lettre mais on aurait pu mettre event
        // en cas de jointure avec 2 classes començant avec un e, on peut par convention mettre ev

        //correction:
        // je créé ma requete sql en utilisant les méthodes de Doctrine, qui ressemble à du sql
        //et qui sont traduites par Doctrine en SQL
        //Cette requete vient récupérer dans la table Event tous les noms dont la category est égale à $alias
        $query = $qb->select('e')
            ->where('e.alias=:alias')//setParameter equivalent au bindparameter en PDO, permet de gérer la sécurité et d'échapper les caractères indésirables (ex: param de commande)
            ->setParameter('alias', $alias)//on interroge sur la variable
            ->getQuery();
        //je récupère les résultats de ma requete
        $results = $query->getArrayResult();
        var_dump($results);
        die;

    }

    public function searchWordAlias($variable){
        $qb=$this->createQueryBuilder('e');
        $query=$qb->select('e')
            ->where('e.alias LIKE :variable')
            ->setParameter('variable','%'.$variable.'%')
            ->getQuery();
        return $results=$query->getArrayResult();
    }


}

